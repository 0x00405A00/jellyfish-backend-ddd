@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService;
@inject WebApiRestClient WebApiClient
@inject IConfiguration Configuration

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <MudNavMenu Bordered Class="flex-column nav">
         <div class="nav-item px-3">
             <MudNavLink class="nav-link" Icon="@Icons.Material.Filled.Home" IconColor="Color.Info" Href="@RouteConst.Routes.Home">
                 <a>Home</a>
             </MudNavLink>
         </div>
        @if (hasLogin)
        {
            <div class="nav-item px-3">
                <MudNavLink class="nav-link" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Info" Href="@RouteConst.Routes.DashBoard">
                    <a>Dashboard</a>
                </MudNavLink>
            </div>
            <div class="nav-item px-3">
                <MudNavLink class="nav-link" Icon="@Icons.Material.Filled.HealthAndSafety" IconColor="Color.Info" Href="@RouteConst.Routes.BackendHealth">
                    <a>Health</a>
                </MudNavLink>
            </div>
            <div class="nav-item px-3">
                <MudNavLink class="nav-link" Icon="@Icons.Material.Filled.People" IconColor="Color.Info" Href="@RouteConst.Routes.Users">
                    <a>Users</a>
                </MudNavLink>
            </div>
        }
        @if (!hasLogin)
        {
            <div class="nav-item px-3">
                <MudNavLink class="nav-link" Href="@RouteConst.Routes.SignIn">
                    <a>SignIn</a>
                </MudNavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <MudButton Variant="Variant.Filled" FullWidth DisableElevation="true" Color="Color.Primary" OnClick="@Logout">Logout</MudButton>
             </div>
        }
    </MudNavMenu>
</div>

@code {
    private bool hasLogin = false;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private CancellationTokenSource cancellationToken = new();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        hasLogin = await LocalStorageService.CheckIfValidTokenExists();
        StateHasChanged();
    }
    public async Task Logout()
    {
        var infrastructureApiSection = Configuration.GetSection("Infrastructure:Api");
        var logoutEndpoint = infrastructureApiSection.GetValue<string>("LogoutEndpoint");
        var token = await LocalStorageService.GetDeserializedJsonItemFromKey<AuthDTO>(AuthorizationConst.BrowserLocalStorageItemKey.Authorization);

        var logoutResponse = await WebApiClient.Request<List<MailOutboxDTO>, object>(logoutEndpoint, RestSharp.Method.Post, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", token.Token) });

        await LocalStorageService.RemoveItem(AuthorizationConst.BrowserLocalStorageItemKey.Authorization);
        
        NavigationManager.NavigateTo(RouteConst.Routes.SignIn);
    }
}
