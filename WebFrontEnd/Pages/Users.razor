@implements IDisposable
@attribute [Route(RouteConst.Routes.Users)]
@inject WebApiRestClient WebApiClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject CustomAuthentificationStateProvider AuthentificationService
@inject DialogHandler DialogHandler

<CascadingAuthenticationState>
    <AuthorizeView Policy="Admin">
        <Authorized>
            <mud>@UsersList.Count Users</mud>
            <MudPaper Elevation="25">
                <MudToolBar>
                    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="AddUser" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Disabled=@CantExecByMultipleSelection OnClick="EditUser" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Remove" Disabled=@CanExecWhenMinOneUserIsSelected OnClick="RemoveUser" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Password" Disabled=@CanExecWhenMinOneUserIsSelected OnClick="ResetPassword" />
                </MudToolBar>
            </MudPaper>
            @if (UsersList != null && UsersList.Count > 0)
            {
                <MudDataGrid T="UserDTO" Items=@UsersList Filterable="false" RowClick=RowClicked SelectedItemsChanged="@SelectedItemsChanged" MultiSelection SelectedItems=@SelectedItems SortMode="@SortMode.Multiple" Groupable="false">
                     <Columns>
                         <SelectColumn T="UserDTO" />
                         <PropertyColumn Property="x => x.UserName" />
                         <PropertyColumn Property="x => x.FirstName" />
                         <PropertyColumn Property="x => x.LastName" />
                         <PropertyColumn Property="x => x.Email" />
                         <PropertyColumn Property="x => x.DateOfBirth" Format="dd.MM.yyyy" />
                         <PropertyColumn Property="x => x.Phone" />
                         <PropertyColumn Property="x => x.CreatedTime" Format="dd.MM.yyyy" />
                         <PropertyColumn Property="x => x.LastModifiedTime" Format="dd.MM.yyyy" />
                         <PropertyColumn Property="x => UserTypesList.Where(y=>y.Uuid==x.UserTypeUuid).First().Name" />
                         <PropertyColumn Property="x => x.RoleStr" />
                         <TemplateColumn>
                             <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@MudBlazor.Color.Primary">Edit</MudButton>
                         </TemplateColumn>
                     </Columns>
                 </MudDataGrid>
            }
            else
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            
        </Authorized>
        <NotAuthorized>
            <p>Sie haben keine Berechtigung, diese Seite anzuzeigen.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    private AuthDTO _token;
    private HashSet<UserDTO> SelectedItems = new HashSet<UserDTO>();
    private CancellationTokenSource cancellationToken = new();
    public List<UserDTO> UsersList = new List<UserDTO>();
    public List<UserTypeDTO> UserTypesList = new List<UserTypeDTO>();
    public List<RoleDTO> RoleList = new List<RoleDTO>();

    public bool HasMoreThanOneUserSelected => SelectedItems != null && SelectedItems.Count > 1;
    public bool CantExecByMultipleSelection => SelectedItems != null && SelectedItems.Count != 1;
    public bool CanExecWhenMinOneUserIsSelected => !(SelectedItems != null && SelectedItems.Count >= 1);

    public Users()
    {
    }
    ~Users()
    {
    }

    private void Dispose()
    {
        cancellationToken?.Cancel();
        SelectedItems.Clear();
        UsersList.Clear();
        UserTypesList.Clear();
        RoleList.Clear();
        _token = null;
        GC.SuppressFinalize(this);
    }
    void IDisposable.Dispose()
    {
        Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            await GetData();
            StateHasChanged();
        }
    }
    private Task RowClicked(DataGridRowClickEventArgs<UserDTO> args)
    {
        return Task.CompletedTask;
    }

    private Task SelectedItemsChanged(HashSet<UserDTO> SelectedItems)
    {

        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task GetData()
    {


        var requestUserTypes = WebApiClient.Request<List<UserTypeDTO>, object>("/user/user-types", RestSharp.Method.Get, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", _token.Token) });
        var requestRoles = WebApiClient.Request<List<RoleDTO>, object>("/role", RestSharp.Method.Get, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", _token.Token) });
        var requestUsers = WebApiClient.Request<List<UserDTO>, object>("/user", RestSharp.Method.Get, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", _token.Token) });


        var responseUsers = await requestUsers;
        var responseUserTypes = await requestUserTypes;
        var responseRoles = await requestRoles;
        if (responseUsers.IsSuccess)
        {
            UsersList = responseUsers.ApiResponseDeserialized;
        }
        if (responseUserTypes.IsSuccess)
        {
            UserTypesList = responseUserTypes.ApiResponseDeserialized;
        }
        if (responseRoles.IsSuccess)
        {
            RoleList = responseRoles.ApiResponseDeserialized;
        }
    }
    public async Task ResetPassword()
    {

    }
    public async Task AddUser()
    {

        var result = await DialogHandler.ShowUserManagementDialog(DialogHandler.MANAGEMENT_TYPE.ADD, new UserDTO(), RoleList, UserTypesList);
        if (!result.Cancelled)
        {
            UsersList.Add((UserDTO)result.Data);
            StateHasChanged();
        }

    }
    public async Task EditUser()
    {
        var user = SelectedItems.First();
        int index = UsersList.IndexOf(user);

        var result = await DialogHandler.ShowUserManagementDialog(DialogHandler.MANAGEMENT_TYPE.EDIT, user, RoleList, UserTypesList);
        if (!result.Cancelled)
        {
            UsersList[index] = ((UserDTO)result.Data);
            StateHasChanged();
        }
    }
    public async Task RemoveUser()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<ChallengeDialog> {
            { x => x.Text,"Möchtest du "+(HasMoreThanOneUserSelected?("'"+SelectedItems.Count+"' User"):("'"+SelectedItems.First().UserName+"'"))+" löschen?" }
            };
        var dialog = await DialogService.ShowAsync<ChallengeDialog>("Benutzer löschen", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            List<Task<WebApiHttpRequestResponseModel<Guid>>> tasks = new List<Task<WebApiHttpRequestResponseModel<Guid>>>();
            foreach (var user in SelectedItems)
            {
                var url = "/user/" + user.Uuid + "";
                var deleteUserRequest = await WebApiClient.Request<Guid, object>(url, RestSharp.Method.Delete, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", _token.Token) });
                if (deleteUserRequest.IsSuccess)
                {
                    var userUuid = UsersList.Where(x => x.Uuid == deleteUserRequest.ApiResponseDeserialized).First();
                    UsersList.Remove(userUuid);
                }
            }

            SelectedItems.Clear();
            StateHasChanged();
        }
    }
}


