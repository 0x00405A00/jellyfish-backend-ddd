@inject JellyfishBackendApi WebApiClient
@inject CustomAuthentificationStateProvider AuthentificationService
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @Text
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField 
                @ref="passwordTextField" 
                InputType="InputType.Password"
            @bind-Value=@Password
                          Label="Password" 
                ReadOnly="false" 
                Required 
                Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" 
                OnKeyUp="@OnKeyUpEvent" />
             <MudTextField @ref="passwordConfirmTextField" InputType="InputType.Password" @bind-Value=@PasswordConfirm Label="PasswordConfirm" ReadOnly="false" Required Validation="@(new Func<string, string>(ComparePasswords))" />
                 @if(errors.Any())
            {
                <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>

            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="MudBlazor.Color.Info" OnClick="Commit">Change</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Text { get; set; }
    [Parameter] public UserDTO User { get; set; } = new UserDTO();

    private AuthDTO _token;
    private CancellationTokenSource cancellationToken = new();
    private MudForm form;
    private MudTextField<string> passwordTextField;
    private MudTextField<string> passwordConfirmTextField;
    private bool success;
    private string[] errors = { };
    private string Password { get; set; }
    private string PasswordConfirm { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            StateHasChanged();
        }

    }
    private IEnumerable<string> ValidatePassword(string password)
    {
        try
        {
            Domain.Entities.User.User.CheckPasswordWithPolicy(password, passwordConfirmTextField.Text);
        }
        catch (Domain.Entities.User.Exception.InvalidPasswordException ex)
        {
            return ex.Errors.ToList();
        }
        return new List<string>();
    }
    private string ComparePasswords(string input)
    {
        if (passwordConfirmTextField.Text!=input)
        {
            return "passwords are not identical";
        }
        return null;
    }
    private void OnKeyUpEvent(KeyboardEventArgs keyboardEventArgs)
    {
        passwordTextField.Validate();
        passwordConfirmTextField.Validate();
        StateHasChanged();
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async void Commit()
    {
        form.Validate();
        if (!success)
            return;

        PasswordChangeDTO passwordChangeDTO = new PasswordChangeDTO() { Password = Password, PasswordRepeat = PasswordConfirm };
        ApiDataTransferObject<PasswordChangeDTO> apiDataTransferObject = ApiDataTransferObject<PasswordChangeDTO>.Create(passwordChangeDTO,null,null);
        var addUserRequest = await WebApiClient.ChangePassword(User.Uuid, passwordChangeDTO,cancellationToken.Token);
        if (addUserRequest.IsSuccess)
        {

            MudDialog.Close(DialogResult.Ok(User));
        }
        else
        {
            
        }
    }
}

