@inject IJellyfishBackendApi WebApiClient
@inject ICustomAuthentificationStateProvider AuthentificationService
@inject IDialogService DialogService
@inject DialogHandler DialogHandler

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @Text
        </MudText>
    </TitleContent>
    <DialogContent>
        <ProfileAvatar User="@User" Loading="@uploadProfilePicture" HeightInPx=256 WidthInPx=256></ProfileAvatar>
        <MudToolBar>
            <MudIconButton OnClick=@OpenUploadPictureDialog Icon="@Icons.Material.Outlined.UploadFile" />
            @if (User.HasImage)
            {
                <MudIconButton OnClick=@ClearProfilePicture Icon="@Icons.Material.Outlined.Clear" />
            }
        </MudToolBar>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField InputType="InputType.Text" @bind-Value=@User.UserName Label="UserName" Variant="Variant.Filled" ReadOnly="false" Required />
             <MudTextField InputType="InputType.Text" @bind-Value=@User.FirstName Label="FirstName" ReadOnly="false" Required />
             <MudTextField @ref="lastNameTextField" InputType="InputType.Text" @bind-Value=@User.LastName Label="LastName" ReadOnly="false" Required RequiredError="Please enter a Lastname" />
             @if (!isEditDialog)
             {

                <MudTextField @ref="passwordTextField" InputType="InputType.Password" @bind-Value=@User.Password Label="Password" ReadOnly="false" Required=@(!isEditDialog) Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" OnKeyUp="@OnKeyUpEvent" />
                <MudTextField @ref="passwordConfirmTextField" InputType="InputType.Password" @bind-Value=@User.PasswordConfirm Label="PasswordConfirm" ReadOnly="false" Required=@(!isEditDialog) Validation="@(new Func<string, string>(ComparePasswords))" />

             }
            <MudTextField InputType="InputType.Email" @bind-Value=@User.Email Label="Email" ReadOnly="false" Required RequiredError="email must be setted" />
             <MudTextField InputType="InputType.Telephone" @bind-Value=@User.Phone Label="Phone" ReadOnly="false" Required RequiredError="phonenumber must be setted" />
             <MudDatePicker Label="Geburstag" DisplayMonths="2" MinDate="@(Domain.Entities.Users.User.MinimumBirthDayDate)" MaxDate="@(Domain.Entities.Users.User.MaximumBirthDayDate)" TitleDateFormat="dd.MM.yyyy" @bind-Date=@User.DateOfBirth Required RequiredError="birthday must be setted" />
             <MudSelect T="UserTypeDTO" MultiSelection=false Label="UserType" AnchorOrigin="Origin.BottomCenter" @bind-Value=@SelectedUserType Required RequiredError="need one user-type">
                 @foreach (var item in UserTypes)
                {
                    <MudSelectItem T="UserTypeDTO" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="RoleDTO" MultiSelection="true" Label="Rollen" AnchorOrigin="Origin.BottomCenter" @bind-SelectedValues=@SelectedRoles Required RequiredError="need minimum one role">
                 @foreach (var item in Roles)
                {
                    <MudSelectItem T="RoleDTO" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="MudBlazor.Color.Info" OnClick="Commit">@(isEditDialog?"Bearbeiten":"Hinzufügen")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Text { get; set; }
    [Parameter] public UserDTO User { get; set; } = new UserDTO();
    [Parameter] public IEnumerable<UserTypeDTO> UserTypes { get; set; } = new HashSet<UserTypeDTO>();
    [Parameter] public IEnumerable<RoleDTO> Roles { get; set; } = new HashSet<RoleDTO>();

    private UserDTO UserBeforeSaving;
    private bool uploadProfilePicture = false;
    private AuthDTO _token;
    private CancellationTokenSource cancellationToken = new();
    private MudForm form;
    private MudTextField<string> userNameTextField;
    private MudTextField<string> firstNameTextField;
    private MudTextField<string> lastNameTextField;
    private MudTextField<string> passwordTextField;
    private MudTextField<string> passwordConfirmTextField;
    private bool success;
    private string[] errors = { };
    private bool isEditDialog=>User!=null&&User.Id!=null&&User.Id!=Guid.Empty;
    private UserTypeDTO SelectedUserType { get; set; } = new UserTypeDTO();
    private IEnumerable<RoleDTO> SelectedRoles { get; set; } = new List<RoleDTO>();
    private IEnumerable<RoleDTO> InitialRoles { get; set; } = new List<RoleDTO>();

    protected override async Task OnParametersSetAsync()
    {
        UserBeforeSaving = (UserDTO)User.Clone();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            if(User.DateOfBirth==null)
            {
                User.DateOfBirth = DateTime.UtcNow;
            }
            if (User.UserTypeUuid!=null)
            {
                SelectedUserType = UserTypes.Where(x => x.Id == User.UserTypeUuid).First();
            }
            if(User.Roles!=null)
            {
                List<RoleDTO> roleDTOs = new List<RoleDTO>();
                Roles.ToList().ForEach(x =>
                {
                    var fromRoles = Roles.Where(y=>y.Id == x.Id).First();
                    if (fromRoles == null)
                        throw new NullReferenceException("role not found");
                    roleDTOs.Add(fromRoles);

                });
                SelectedRoles = roleDTOs;
                InitialRoles = SelectedRoles;
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        try
        {
            Domain.Entities.Users.User.CheckPasswordWithPolicy(password, passwordConfirmTextField.Value);
        }
        catch (InvalidPasswordException ex)
        {
            return ex.Errors.ToList();
        }
        return new List<string>();
    }
    private string ComparePasswords(string input)
    {
        if (passwordConfirmTextField.Value!=input)
        {
            return "passwords are not identical";
        }
        return null;
    }

    private void OnKeyUpEvent(KeyboardEventArgs keyboardEventArgs)
    {
        if (passwordTextField is null || passwordConfirmTextField is null)
            return; 
        passwordTextField.Validate();
        passwordConfirmTextField.Validate();
        StateHasChanged();
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async void ClearProfilePicture()
    {
        uploadProfilePicture = true;
        StateHasChanged();
        var responseProfilePicDelete = await WebApiClient.DeleteUserProfilePicture(User, cancellationToken.Token);
        if (responseProfilePicDelete.IsSuccess)
        {
            User.PictureBase64 = null;
            User.PictureUrl = null;
            uploadProfilePicture = false;
        }
        StateHasChanged();
    }
    private async void OpenUploadPictureDialog()
    {
        var result = await DialogHandler.ShowUploadDialog("Upload a profile Picture.");
        if(!result.Cancelled)
        {
            StateHasChanged();
            var image = (IBrowserFile)result.Data;
            byte[] fileBytes = new byte[image.Size];
            await image.OpenReadStream((UploadFileDialog.MaxAllowedFileSizeBytes)).ReadAsync(fileBytes);
            User.PictureBase64 = Convert.ToBase64String(fileBytes);
            User.PictureMimeType = image.ContentType;

            StateHasChanged();
            uploadProfilePicture = true;
            var responseProfilePicUpload = await WebApiClient.UpdateUserProfilePicture(User, cancellationToken.Token);
            if (responseProfilePicUpload.IsSuccess)
            {
                uploadProfilePicture = false;
                User.PictureBase64 = null;
                User.PictureUrl = responseProfilePicUpload.Data.PictureUrl;
                StateHasChanged();

            }
        }
    }
    private List<RoleDTO> GetRevokedRoles()
    {
        return InitialRoles.Where(x => !SelectedRoles.Where(y=>y.Id == x.Id).Any())?.ToList();
    }
    private List<RoleDTO> GetAssignedRoles()
    {
        return SelectedRoles.Where(x => !InitialRoles.Where(y => y.Id == x.Id).Any())?.ToList();
    }

    private async void Commit()
    {
        form.Validate();
        if (!success)
            return;
        User.UserTypeUuid =SelectedUserType.Id;
        User.Roles =SelectedRoles.ToList();

        if(isEditDialog)//Edit
        {
            JellyfishBackendApi.JellyfishBackendApiResponse<UserDTO> responseEditUser = await WebApiClient.EditUser(User, cancellationToken.Token);
            JellyfishBackendApi.JellyfishBackendApiResponse<List<Guid>> responseAssigneRoles = null;
            JellyfishBackendApi.JellyfishBackendApiResponse<List<Guid>> responseRevokeRoles = null;
            var revokedRoles = GetRevokedRoles();
            var assignedRoles = GetAssignedRoles();

            if(revokedRoles.Any())
            {

                responseRevokeRoles = await WebApiClient.RevokeRoles(User, revokedRoles, cancellationToken.Token);
                if (responseRevokeRoles.IsSuccess)
                {
                    
                }
            }
            if(assignedRoles.Any())
            {

                responseAssigneRoles = await WebApiClient.AssignRoles(User, assignedRoles, cancellationToken.Token);
                if (responseAssigneRoles.IsSuccess)
                {

                }

            }
            if (responseEditUser.IsSuccess || ((assignedRoles.Any() && responseAssigneRoles.IsSuccess) || (revokedRoles.Any() && responseRevokeRoles.IsSuccess)))
            {
                User.ResetFieldsForUserInterface();
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
        else//Add
        {
            var response = await WebApiClient.AddUser(User, cancellationToken.Token);
            if (response.IsSuccess)
            {
                User.ResetFieldsForUserInterface();
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
    }
}

