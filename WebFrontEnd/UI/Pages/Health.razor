@implements IDisposable
@attribute [Route(RouteConst.Routes.BackendHealth)]
@inject WebApiRestClient WebApiClient
@inject ICustomAuthentificationStateProvider AuthentificationService
@inject IConfiguration Configuration
@inject IExtendedNavigationManager NavigationManager

<h3>Health</h3>

<MudTabs @ref="_mudTabs" Outlined="true" ActivePanelIndexChanged="TabChanged">
    <MudTabPanel ID="@TabIdDatabase" Text="Database" Icon="@Icons.Material.Filled.DataArray">
        @if (HealthCheck.Checks != null && HealthCheck.Checks.mysql != null)
        {

            <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
            <MudText>@HealthCheck.Checks.mysql.description</MudText>
        }
        else
        {

            @if (_showSkeleton)
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            else
            {
                <MudText>No data</MudText>
            }
        }
    </MudTabPanel>
    <MudTabPanel ID="@TabIdCache" Text="Cache" Icon="@Icons.Material.Filled.Cached">

        @if (HealthCheck.Checks != null && HealthCheck.Checks.cache != null)
        {

            <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
            <MudText>@HealthCheck.Checks.cache.description</MudText>
        }
        else
        {

            @if (_showSkeleton)
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            else
            {
                <MudText>No data</MudText>
            }
        }
    </MudTabPanel>
    <MudTabPanel ID="@TabIdSignalR" Text="SignalR" Icon="@Icons.Material.Filled.Message">

        @if (HealthCheck.Checks != null && HealthCheck.Checks.cache!=null)
        {

            <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
            <MudText>@HealthCheck.Checks.cache.description</MudText>
        }
        else
        {

            @if (_showSkeleton)
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            else
            {
                <MudText>No data</MudText>
            }
        }
    </MudTabPanel>
    <MudTabPanel ID="@TabIdMailQueue" Text="Mail Queue" Icon="@Icons.Material.Filled.Queue">

        @if (MailQueue!=null&&MailQueue.Any())
        {
            <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
            <MudDataGrid Items=@MailQueue Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <SelectColumn T="UserDTO" />
                    <PropertyColumn Property="x => x.CreatedTime" Format="dd.MM.yyyy HH:mm:ss" />
                    <PropertyColumn Property="x => x.From" />
                    <PropertyColumn Property="x => x.Subject" />
                    <PropertyColumn Property="x => x.RecipientsAggregate" />
                </Columns>
            </MudDataGrid>
        }
        else
        {

            @if(_showSkeleton)
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            else
            {
                <MudText>No data</MudText>
            }
        }
    </MudTabPanel>
</MudTabs>
@code {
    private readonly string TabIdMailQueue = "tab_mailqueue_"+Guid.NewGuid().ToString();
    private readonly string TabIdDatabase = "tab_database_" + Guid.NewGuid().ToString();
    private readonly string TabIdCache = "tab_cache_" + Guid.NewGuid().ToString();
    private readonly string TabIdSignalR = "tab_signalr_" + Guid.NewGuid().ToString();
    private MudTabs _mudTabs = new MudTabs();
    private DateTime TimeFromRequestHealthCheckService = DateTime.MinValue;
    private DateTime TimeFromRequestHealthCheckMailQueue = DateTime.MinValue;
    private CancellationTokenSource cancellationToken = new();
    public HealthZDTO HealthCheck = new HealthZDTO();
    public List<MailOutboxDTO> MailQueue = new List<MailOutboxDTO>();
    private bool _showSkeleton = true;
    private IConfigurationSection infrastructureApiSection = null;
    private string url = null;
    private string urlController = null;
    private AuthDTO token;
    private int currentTab;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            infrastructureApiSection = Configuration.GetSection("Infrastructure:Api");
            url = infrastructureApiSection.GetValue<string>("HealthCheck");
            urlController = infrastructureApiSection.GetValue<string>("HealthCheckController");
            await GetDataHealthCheck();
            StateHasChanged();
        }
    }
    private async void TabChanged(int index)
    {
        if (index != currentTab)
        {
            cancellationToken.Cancel();
            if (_mudTabs.ActivePanel != null && _mudTabs.ActivePanel.ID.ToString() == TabIdDatabase || _mudTabs.ActivePanel!= null&&_mudTabs.ActivePanel.ID.ToString() == TabIdCache)
            {
                await GetDataHealthCheck();
            }
            else if (_mudTabs.ActivePanel!= null&&_mudTabs.ActivePanel.ID.ToString() == TabIdMailQueue)
            {
                await GetDataMailQueue();
            }
            currentTab = index;
        }
    }
    private async Task GetDataMailQueue()
    {
        _showSkeleton = true;
        urlController += "/mail-queue";
        var responseMailQueue = await WebApiClient.Request<List<MailOutboxDTO>, object>(urlController, RestSharp.Method.Get, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", token.Token) });
        if(responseMailQueue.IsSuccess)
        {
            MailQueue = responseMailQueue.ApiResponseDeserialized;
            TimeFromRequestHealthCheckMailQueue = DateTime.UtcNow;
        }
        _showSkeleton = false;
    }
    private async Task GetDataHealthCheck()
    {
        _showSkeleton = true;
        var responseServices = await WebApiClient.Request<HealthZDTO, object>(url, RestSharp.Method.Get, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", token.Token) });
        if (responseServices.IsSuccess)
        {
            HealthCheck = responseServices.ApiResponseDeserialized;
            TimeFromRequestHealthCheckService = DateTime.UtcNow;
        }
        _showSkeleton = false;
    }
    private void Dispose()
    {
        cancellationToken.Cancel();
        MailQueue.Clear();
        HealthCheck = null;
        GC.SuppressFinalize(this);
    }
    void IDisposable.Dispose()
    {
        Dispose();
    }
}
