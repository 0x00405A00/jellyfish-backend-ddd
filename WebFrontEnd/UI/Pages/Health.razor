@implements IDisposable
@attribute [Route(RouteConst.Routes.BackendHealth)]
@inject WebApiRestClient WebApiClient
@inject ICustomAuthentificationStateProvider AuthentificationService
@inject IConfiguration Configuration
@inject IExtendedNavigationManager NavigationManager

<h3>Health</h3>

<MudCard Class="m-4">
    <MudCardContent>

        <MudTabs @ref="_mudTabs" Outlined="false" ActivePanelIndexChanged="TabChanged">
            <MudTabPanel ID="@TabIdDatabase" Text="Database" Icon="@Icons.Material.Filled.DataArray">
                @if (HealthCheck.Checks != null && HealthCheck.Checks.mysql != null)
                {
                    <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
                    <MudList>
                        @foreach(var item in HealthCheck.Checks.mysql.GetFormattedDescription())
                        {
                            <MudListItem>
                                <div class="flex">
                                    <MudIcon Class="d-inline-flex" Icon="@Icons.Material.Filled.Details"></MudIcon>
                                    <MudText Inline Class="ml-auto">@item</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {

                    @if (_showSkeleton)
                    {
                        <MudSkeleton />
                        <MudSkeleton Animation="Animation.False" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                    else
                    {
                        <MudText>No data</MudText>
                    }
                }
            </MudTabPanel>
            <MudTabPanel ID="@TabIdCache" Text="Cache" Icon="@Icons.Material.Filled.Cached">

                @if (HealthCheck.Checks != null && HealthCheck.Checks.cache != null)
                {
                    <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
                    <MudList>
                        @foreach (var item in HealthCheck.Checks.cache.GetFormattedDescription())
                        {
                            <MudListItem>
                                <div class="flex">
                                    <MudIcon Class="d-inline-flex" Icon="@Icons.Material.Filled.Details"></MudIcon>
                                    <MudText Inline Class="ml-auto">@item</MudText>
                                    </div>
                                </MudListItem>
                        }
                    </MudList>
                }
                else
                {

                    @if (_showSkeleton)
                    {
                        <MudSkeleton />
                        <MudSkeleton Animation="Animation.False" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                    else
                    {
                        <MudText>No data</MudText>
                    }
                }
            </MudTabPanel>
            <MudTabPanel ID="@TabIdSignalR" Text="SignalR" Icon="@Icons.Material.Filled.Message">

                @if (HealthCheck.Checks != null && HealthCheck.Checks.signalr != null)
                {
                    <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
                    <MudList>
                        @foreach (var item in HealthCheck.Checks.signalr.GetFormattedDescription())
                        {
                            <MudListItem>
                                <div class="flex">
                                    <MudIcon Class="d-inline-flex" Icon="@Icons.Material.Filled.Details"></MudIcon>
                                    <MudText Inline Class="ml-auto">@item</MudText>
                                    </div>
                                </MudListItem>
                        }
                    </MudList>
                }
                else
                {

                    @if (_showSkeleton)
                    {
                        <MudSkeleton />
                        <MudSkeleton Animation="Animation.False" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                    else
                    {
                        <MudText>No data</MudText>
                    }
                }
            </MudTabPanel>
            <MudTabPanel ID="@TabIdMailQueue" Text="Mail Queue" Icon="@Icons.Material.Filled.Queue">

                @if (MailQueue != null && MailQueue.Any())
                {
                    <MudText Typo="Typo.caption">Stand: @TimeFromRequestHealthCheckService</MudText>
                    <MudDataGrid Items=@MailQueue Filterable="false" SortMode="@SortMode.None" Groupable="false">
                        <Columns>
                            <SelectColumn T="UserDTO" />
                            <PropertyColumn Property="x => x.CreatedTime" Format="dd.MM.yyyy HH:mm:ss" />
                            <PropertyColumn Property="x => x.From" />
                            <PropertyColumn Property="x => x.Subject" />
                            <PropertyColumn Property="x => x.RecipientsAggregate" />
                        </Columns>
                    </MudDataGrid>
                }
                else
                {

                    @if (_showSkeleton)
                    {
                        <MudSkeleton />
                        <MudSkeleton Animation="Animation.False" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                    else
                    {
                        <MudText>No data</MudText>
                    }
                }
            </MudTabPanel>
        </MudTabs>
    </MudCardContent>
</MudCard>
<MudCard Class="m-4">
    <MudCardHeader>
        <MudIcon Class="mr-5" Icon="@Icons.Material.Filled.Cloud"></MudIcon>
        <MudText Typo="Typo.h6">Backend General</MudText>
        <MudFab @ref=ExpandBackendGeneralTable Class="ml-2" Size=Size.Small Color="MudBlazor.Color.Transparent" StartIcon="@_expandHealthCheckBackendGeneralButtonIcon" OnClick="@ExpandHealthCheckBackendGeneral" />
    </MudCardHeader>
    <MudCardContent>
        <MudCollapse Expanded=@_collapsedHealthCheckGeneral>
            <MudTable T="(string ItemDesc,object value)" Items="@HealthCheckGeneralData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_showSkeleton" LoadingProgressColor="MudBlazor.Color.Info">
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Value</MudTh>
                </HeaderContent>
                <RowTemplate Context="TableContext">
                    <MudTd DataLabel="#">@TableContext.ItemDesc</MudTd>
                        <MudTd DataLabel="Value">@TableContext.value</MudTd>
                    </RowTemplate>
                </MudTable>
        </MudCollapse>

    </MudCardContent>
</MudCard>

    @code {
    private string _expandHealthCheckBackendGeneralButtonIcon = Icons.Material.Filled.ExpandMore;
    private MudFab ExpandBackendGeneralTable;
    private bool _collapsedHealthCheckGeneral = true;
    private readonly string TabIdMailQueue = "tab_mailqueue_"+Guid.NewGuid().ToString();
    private readonly string TabIdDatabase = "tab_database_" + Guid.NewGuid().ToString();
    private readonly string TabIdCache = "tab_cache_" + Guid.NewGuid().ToString();
    private readonly string TabIdSignalR = "tab_signalr_" + Guid.NewGuid().ToString();
    private MudTabs _mudTabs = new MudTabs();
    private DateTime TimeFromRequestHealthCheckService = DateTime.MinValue;
    private DateTime TimeFromRequestHealthCheckMailQueue = DateTime.MinValue;
    private CancellationTokenSource cancellationToken = new();
    public HealthZDTO HealthCheck = new HealthZDTO();
    public List<MailOutboxDTO> MailQueue = new List<MailOutboxDTO>();
    private bool _showSkeleton = true;
    private IConfigurationSection infrastructureApiSection = null;
    private string url = null;
    private string urlController = null;
    private AuthDTO token;
    private int currentTab;
    public ICollection<(string ItemDesc, object Value)> HealthCheckGeneralData = new List<(string ItemDesc, object Value)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            infrastructureApiSection = Configuration.GetSection("Infrastructure:Api");
            url = infrastructureApiSection.GetValue<string>("HealthCheck");
            urlController = infrastructureApiSection.GetValue<string>("HealthCheckController");
            await GetDataHealthCheck();
            StateHasChanged();
        }
    }
    private async void TabChanged(int index)
    {
        if (index != currentTab)
        {
            cancellationToken.Cancel();
            if (_mudTabs.ActivePanel != null && _mudTabs.ActivePanel.ID.ToString() == TabIdDatabase || _mudTabs.ActivePanel!= null&&_mudTabs.ActivePanel.ID.ToString() == TabIdCache)
            {
                await GetDataHealthCheck();
            }
            else if (_mudTabs.ActivePanel!= null&&_mudTabs.ActivePanel.ID.ToString() == TabIdMailQueue)
            {
                await GetDataMailQueue();
            }
            currentTab = index;
        }
    }
    private async Task GetDataMailQueue()
    {
        _showSkeleton = true;
        urlController += "/mail-queue";
        var responseMailQueue = await WebApiClient.Request<List<MailOutboxDTO>, object>(urlController, RestSharp.Method.Get, cancellationToken.Token, null);
        if(responseMailQueue.IsSuccessStatusCode)
        {
            MailQueue = responseMailQueue.ApiResponseDeserialized;
            TimeFromRequestHealthCheckMailQueue = DateTime.UtcNow;
        }
        _showSkeleton = false;
    }
    private async Task GetDataHealthCheck()
    {
        _showSkeleton = true;
        var responseServices = await WebApiClient.Request<HealthZDTO, object>(url, RestSharp.Method.Get, cancellationToken.Token, null);
        if (responseServices.HasDeserializedData)
        {
            HealthCheck = responseServices.ApiResponseDeserialized;
            TimeFromRequestHealthCheckService = DateTime.UtcNow;

            var props = responseServices.ApiResponseDeserialized.GetType().GetProperties().Where(x=>x.PropertyType != typeof(Checks));
            foreach(var prop in props)
            {
                var val = prop.GetValue(responseServices.ApiResponseDeserialized);

                if(val is IDictionary<string,string> dict)
                {
                    string dictAggr = null;
                    foreach(var keyValuePair in dict)
                    {

                        dictAggr += string.Format("{0}={1};", keyValuePair.Key,keyValuePair.Value);
                    }
                    HealthCheckGeneralData.Add(new(prop.Name, dictAggr));
                }
                else
                    HealthCheckGeneralData.Add(new(prop.Name, val));
            }
        }
        _showSkeleton = false;
    }
    private void ExpandHealthCheckBackendGeneral()
    {
        _collapsedHealthCheckGeneral = !_collapsedHealthCheckGeneral;
        _expandHealthCheckBackendGeneralButtonIcon = _collapsedHealthCheckGeneral ? Icons.Material.Filled.ExpandMore : Icons.Material.Filled.ExpandLess;
    }
    private void Dispose()
    {
        cancellationToken.Cancel();
        MailQueue.Clear();
        HealthCheck = null;
        GC.SuppressFinalize(this);
    }
    void IDisposable.Dispose()
    {
        Dispose();
    }
}
