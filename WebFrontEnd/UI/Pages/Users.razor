@implements IDisposable
@attribute [Route(RouteConst.Routes.Users)]
@inject JellyfishBackendApi WebApiClient
@inject IDialogService DialogService
@inject CustomAuthentificationStateProvider AuthentificationService
@inject DialogHandler DialogHandler
@inject ISessionStorage SessionStorage
@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <AuthorizeView Policy="Admin">
        <Authorized>
            <MudText Typo="Typo.h5">@(_selectedItemsPerPage == UsersList.Count ? (_selectedPage * UsersList.Count) : (_totalUsers))/@_totalUsers Users</MudText>

            <MudToolBar Class="d-flex flex-wrap align-content-around w-100 m-0">
                <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="AddUser" />
                <MudIconButton Class="ml-1" Icon="@Icons.Material.Outlined.Edit" Disabled=@CantExecByMultipleSelection OnClick="EditUser" />
                <MudIconButton Class="ml-1" Icon="@Icons.Material.Outlined.Remove" Disabled=@CanExecWhenMinOneUserIsSelected OnClick="RemoveUser" />
                <MudIconButton Class="ml-1" Icon="@Icons.Material.Outlined.Password" Disabled=@CantExecByMultipleSelection OnClick="ResetPassword" />
                <MudTooltip Text="Search User. Minimum 3 chars.">
                    <MudInput Class="ml-5" T="string" Variant="Variant.Outlined" Placeholder="Searchtext..." Disabled=@IsSearching DisableUnderLine InputMode="InputMode.search" TextChanged="@SearchTextChanged"></MudInput>

                 </MudTooltip>
                 <MudSelect Class="ml-1 mr-0 w-100 mb-2 mt-2" T="int" @bind-Value=@SelectedItemsPerPage Label="Items per Page" FullWidth=false MultiSelection=false Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var item in _itemsPerPageSet)
                    {
                        <MudSelectItem T="int" Value="@item" />
                    }
                </MudSelect>
            </MudToolBar>
            @if (UsersList != null && UsersList.Count > 0)
            {
                <MudTable @ref=@UserListTable T="UserDTO" Items=@UsersList SelectedItemsChanged="@SelectedItemsChanged" MultiSelection SelectedItems=@SelectedItems SortMode="@SortMode.Multiple">
                     <HeaderContent>
                         <MudTh></MudTh>
                         <MudTh></MudTh>
                         <MudTh>UserName</MudTh>
                         <MudTh>FirstName</MudTh>
                         <MudTh>LastName</MudTh>
                         <MudTh>Email</MudTh>
                         <MudTh>DateOfBirth</MudTh>
                         <MudTh>Phone</MudTh>
                         <MudTh>CreatedTime</MudTh>
                         <MudTh>LastModifiedTime</MudTh>
                         <MudTh>UserType</MudTh>
                         <MudTh>Roles</MudTh>
                    </HeaderContent>

                     <RowTemplate Context="TableContext">
                         <MudTd>
                             <MudText>#@(((_selectedPage-1) * _selectedItemsPerPage) + (UsersList.IndexOf(TableContext)+1))</MudText>
                         </MudTd>
                         <MudTd>
                            <ProfileAvatar User="@TableContext" HeightInPx=45 WidthInPx=45></ProfileAvatar>
                         </MudTd>
                         <MudTd DataLabel="UserName">@TableContext.UserName</MudTd>
                         <MudTd DataLabel="FirstName">@TableContext.FirstName</MudTd>
                         <MudTd DataLabel="LastName">@TableContext.LastName</MudTd>
                         <MudTd DataLabel="Email">@TableContext.Email</MudTd>
                         <MudTd DataLabel="DateOfBirth">@TableContext.DateOfBirth?.ToString("dd.MM.yyyy")</MudTd>
                         <MudTd DataLabel="Phone">@TableContext.Phone</MudTd>
                         <MudTd DataLabel="CreatedTime">@TableContext.CreatedTime?.ToString("dd.MM.yyyy")</MudTd>
                         <MudTd DataLabel="LastModifiedTime">@TableContext.LastModifiedTime?.ToString("dd.MM.yyyy")</MudTd>
                         <MudTd DataLabel="UserType">@UserTypesList.Where(y=>y.Uuid==@TableContext.UserTypeUuid).First().Name</MudTd>
                         <MudTd DataLabel="Roles">@TableContext.RoleStr</MudTd>
                    </RowTemplate>
                </MudTable>
                
                <MudPagination SelectedChanged=@PageChanged ShowFirstButton="true" BoundaryCount="2" MiddleCount="5" ShowLastButton="true" Count="@_maxPages" Class="align-self-center mt-5 mb-5" />
            }
            else
            {
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            }
            
        </Authorized>
        <NotAuthorized>
            <p>Sie haben keine Berechtigung, diese Seite anzuzeigen.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private bool IsSearching = false;
    private MudTable<UserDTO> UserListTable;
    private string SearchText;
    private int _selectedPage = 1;
    private int _selectedItemsPerPage = 10;
    public int SelectedItemsPerPage
    {
        get
        {
            return _selectedItemsPerPage;
        }
        set
        {
            PageItemSelectionChanged(value);
        }
    }
    private List<int> _itemsPerPageSet = new List<int> { 10, 20, 50, 75 };
    private int _maxPages = 1;
    private int _totalUsers = 1;
    private AuthDTO _token;
    private SessionDTO _session;
    private HashSet<UserDTO> SelectedItems = new HashSet<UserDTO>();
    private CancellationTokenSource cancellationToken = new();
    public List<UserDTO> UsersList = new List<UserDTO>();
    public List<UserTypeDTO> UserTypesList = new List<UserTypeDTO>();
    public List<RoleDTO> RoleList = new List<RoleDTO>();

    public bool HasMoreThanOneUserSelected => SelectedItems != null && SelectedItems.Count > 1;
    public bool CantExecByMultipleSelection => SelectedItems != null && SelectedItems.Count != 1;
    public bool CanExecWhenMinOneUserIsSelected => !(SelectedItems != null && SelectedItems.Count >= 1);

    public Users()
    {
    }
    ~Users()
    {
    }

    private void Dispose()
    {
        cancellationToken?.Cancel();
        SelectedItems.Clear();
        UsersList.Clear();

        UserTypesList.Clear();
        RoleList.Clear();
        _token = null;
        GC.SuppressFinalize(this);
    }
    void IDisposable.Dispose()
    {
        Dispose();
    }
    private bool IsRowVisible(UserDTO item)
    {
        return item.ActivationDateTime!=null;
    }
    private async void SearchTextChanged(string text)
    {
        SearchText = text;

        bool canSearch = SearchText.Length >= 3;
        if (canSearch)
        {
            IsSearching = true;
            UsersList.Clear();
            StateHasChanged();
        }

        var response = await GetUsers(canSearch?SearchText:null);

        IsSearching = false;
        StateHasChanged();

    }
    private async void PageItemSelectionChanged(int value)
    {
        if (value == _selectedItemsPerPage)
            return;
        _selectedItemsPerPage = value;
        var data = _session.UsersPage;
        data.MaxItemsPerPage = _selectedItemsPerPage;
        _selectedPage = 1;
        SessionStorage.SetSession(_session, cancellationToken.Token);
        PageChanged(_selectedPage);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _session = await SessionStorage.GetSession(cancellationToken.Token);
            var data = _session.UsersPage;
            _selectedItemsPerPage = data.MaxItemsPerPage;
            _token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            await GetData();
            StateHasChanged();
        }
    }
    private async void PageChanged(int page)
    {
        _selectedPage = page;
        var response = await GetUsers(SearchText);

        StateHasChanged();
    }

    public async Task<JellyfishBackendApi.JellyfishBackendApiResponse<List<UserDTO>>> GetUsers(string searchText = null)
    {

        SearchParamsBody searchParamsBody = new SearchParamsBody();
        searchParamsBody.page_offset = _selectedPage;
        searchParamsBody.page_size = _selectedItemsPerPage;
        var columnFilterGroupAnd = new Shared.DataFilter.Infrastructure.ColumnFilterGroup
            {
                Group = "and",
                Filters = new List<Shared.DataFilter.Infrastructure.ColumnFilter>
                            {
                                new Shared.DataFilter.Infrastructure.ColumnFilter
                                {
                                    field = "deleted_time", op = "eq", value = null
                                }
                            }
            };
        searchParamsBody.filters = new List<Shared.DataFilter.Infrastructure.ColumnFilterGroup>
        {
            columnFilterGroupAnd
        };
        if (!String.IsNullOrWhiteSpace(searchText))
        {
            var columnFilterGroupOr =
                    new Shared.DataFilter.Infrastructure.ColumnFilterGroup
                        {
                            Group = "or",
                            Filters = new List<Shared.DataFilter.Infrastructure.ColumnFilter>()
                        };

            var properties = typeof(UserDTO).GetProperties().Where(x => x.CanWrite && x.PropertyType == typeof(string)).Select(x => x.GetCustomAttribute<JsonPropertyNameAttribute>()).ToList();
            foreach (var prop in properties)
            {
                string field = prop.Name;
                var condition = new Shared.DataFilter.Infrastructure.ColumnFilter
                    {
                        field = field,
                        op = "contains",
                        value = searchText
                    };
                columnFilterGroupOr.Filters.Add(condition);
            }
            searchParamsBody.filters.Add(columnFilterGroupOr);
        }
        var response = await WebApiClient.GetUsers(searchParamsBody, cancellationToken.Token);

        if (response.IsSuccess)
        {
            UsersList = response.Data;
            _maxPages = response.DefaultResponse.ApiResponseDeserialized.Meta.Pagination.TotalPages;
            _totalUsers = response.DefaultResponse.ApiResponseDeserialized.Meta.Pagination.TotalItems;
        }
        return response;
    }

    private Task SelectedItemsChanged(HashSet<UserDTO> SelectedItems)
    {

        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task GetData()
    {


        var requestUserTypes = await WebApiClient.GetUserTypes(cancellationToken.Token);
        var requestRoles = await WebApiClient.GetRoles(cancellationToken.Token);

        if (requestUserTypes.IsSuccess)
        {
            UserTypesList = requestUserTypes.Data;
        }
        if (requestRoles.IsSuccess)
        {
            RoleList = requestRoles.Data;
        }
        PageChanged(_selectedPage);
    }
    public async Task ResetPassword()
    {

        var user = SelectedItems.First();
        int index = UsersList.IndexOf(user);

        var result = await DialogHandler.ShowUserPasswordChangeDialog(user);
        if (!result.Cancelled)
        {
            UsersList[index] = ((UserDTO)result.Data);
            StateHasChanged();
        }
    }
    public async Task AddUser()
    {

        var result = await DialogHandler.ShowUserManagementDialog(DialogHandler.MANAGEMENT_TYPE.ADD, new UserDTO(), RoleList, UserTypesList);
        if (!result.Cancelled)
        {
            UsersList.Add((UserDTO)result.Data);
            StateHasChanged();
        } 

    }
    public async Task EditUser()
    {
        var user = SelectedItems.First();
        int index = UsersList.IndexOf(user);

        var result = await DialogHandler.ShowUserManagementDialog(DialogHandler.MANAGEMENT_TYPE.EDIT, user, RoleList, UserTypesList);
        if (!result.Cancelled)
        {
            UsersList[index] = ((UserDTO)result.Data);
        }
        StateHasChanged();
    }
    public async Task RemoveUser()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<ChallengeDialog> {
            { x => x.Text,"Möchtest du "+(HasMoreThanOneUserSelected?("'"+SelectedItems.Count+"' User"):("'"+SelectedItems.First().UserName+"'"))+" löschen?" }
            };
        var dialog = await DialogService.ShowAsync<ChallengeDialog>("Benutzer löschen", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            List<Task<WebApiHttpRequestResponseModel<Guid>>> tasks = new List<Task<WebApiHttpRequestResponseModel<Guid>>>();
            foreach (var user in SelectedItems)
            {
                var url = "/user/" + user.Uuid + "";
                var deleteUserRequest = await WebApiClient.Request < ApiDataTransferObject<Guid>, object>(url, RestSharp.Method.Delete, cancellationToken.Token, null, headers: new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Authorization", _token.Token) });
                if (deleteUserRequest.IsSuccess)
                {
                    var userUuid = UsersList.Where(x => x.Uuid == deleteUserRequest.ApiResponseDeserialized.Data.Value).First();
                    UsersList.Remove(userUuid);
                }
            }

            SelectedItems.Clear();
            StateHasChanged();
        }
    }
}


