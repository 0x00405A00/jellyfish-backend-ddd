@attribute [Route(RouteConst.Routes.SignIn)]
@inject IExtendedNavigationManager NavigationManager
@inject CustomAuthentificationStateProvider AuthentificationService

<PageTitle>SignIn</PageTitle>

<div class="sign-in-container">
    <MudCard Class="m-5">
        <MudCardHeader Class="m-10">
            <MudText Typo="Typo.h5">Register</MudText>
        </MudCardHeader>
        <MudCardContent Class="ml-5 mt-2 mb-2 mr-5">
            <MudForm @ref="formRegister" @bind-IsValid="@successValidationRegisterForm" @bind-Errors="@errorsRegisterForm">
                <MudTextField @ref="userNameTextField" T="string" Label="Username" InputType="InputType.Text" @bind-Value=@RegisterUserDTO.UserName Required />

                 <MudTextField @ref="firstNameTextField" T="string" Label="Vorname" InputType="InputType.Text" @bind-Value=@RegisterUserDTO.FirstName Required />

                 <MudTextField @ref="lastNameTextField" T="string" Label="Nachname" InputType="InputType.Text" @bind-Value=@RegisterUserDTO.LastName Required />

                 <MudTextField @ref="passwordTextField" T="string" Label="Passwort" InputType="InputType.Password" @bind-Value=@RegisterUserDTO.Password Required />

                 <MudTextField @ref="passwordConfirmTextField" T="string" Label="Passwort (wiederholen)" InputType="InputType.Password" @bind-Value=@RegisterUserDTO.PasswordRepeat Required />

                 <MudTextField T="string" Label="Email" InputType="InputType.Text" @bind-Value=@RegisterUserDTO.Email Required />

                 <MudTextField T="string" Label="Telefon" InputType="InputType.Telephone" @bind-Value=@RegisterUserDTO.Phone Required />
                <MudDatePicker 
                    Label="Geburstag" 
                    DisplayMonths="2" 
                    MinDate="@(User.MinimumBirthDayDate)" 
                    MaxDate="@(User.MaximumBirthDayDate)" 
                    TitleDateFormat="dd.MM.yyyy" @bind-Date=@RegisterDateTime 
                    Required 
                    RequiredError="birthday must be setted" />

                 <MudButton Class="mt-5" Variant="Variant.Filled" DisableElevation="true" OnClick=@OnSubmitRegister Color="MudBlazor.Color.Primary">Register</MudButton>
                @if (RegisterError)
                {
                    foreach (var error in RegisterErrors)
                    {
                        <MudAlert Severity="Severity.Error">@error.Message</MudAlert>
                    }
                    foreach (var error in errorsRegisterForm)
                    {
                        <MudAlert Severity="Severity.Error">@error</MudAlert>
                    }

                }
            </MudForm>
        </MudCardContent>
    </MudCard>

    <MudCard Class="m-5">
        <MudCardHeader Class="m-10">
            <MudText Typo="Typo.h5">Login</MudText>
        </MudCardHeader>
        <MudCardContent Class="ml-5 mt-2 mb-2 mr-5">
            <MudForm @ref="formLogin" @bind-IsValid="@successValidationLoginForm" @bind-Errors="@errorsLoginForm">
                <MudTextField T="string" Label="Email" InputType="InputType.Text" @bind-Value=@UserLoginDTO.Email Required />

                 <MudTextField T="string" Label="Passwort" InputType="InputType.Password" @bind-Value=@UserLoginDTO.Password Required />
                <div class="pt-5">
                     <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick=@OnSubmitLogin Color="MudBlazor.Color.Primary">Login</MudButton>
                     <MudLink Class="ml-2" Href=@RouteConst.Routes.ResetPasswordRequest>Passwort vergessen?</MudLink>

                </div>
                @if (LoginError)
                {
                    <MudAlert Severity="Severity.Error">username or password wrong</MudAlert>
                    foreach (var error in errorsLoginForm)
                    {
                        <MudAlert Severity="Severity.Error">@error</MudAlert>
                    }
                }
            </MudForm>
        </MudCardContent>
    </MudCard>
</div>

@code {
    public bool RegisterError => RegisterErrors.Any();
    public bool LoginError = false;
    public List<ApiError> RegisterErrors = new List<ApiError>();
    public DateTime? RegisterDateTime = DateTime.UtcNow;
    public UserLoginDTO UserLoginDTO = new UserLoginDTO();
    public RegisterUserDTO RegisterUserDTO = new RegisterUserDTO();
    private MudTextField<string> userNameTextField;
    private MudTextField<string> firstNameTextField;
    private MudTextField<string> lastNameTextField;
    private MudTextField<string> passwordTextField;
    private MudTextField<string> passwordConfirmTextField;
    private MudForm formRegister;
    private MudForm formLogin;
    private bool successValidationLoginForm;
    private string[] errorsLoginForm = { };
    private bool successValidationRegisterForm;
    private string[] errorsRegisterForm = { };

    private CancellationTokenSource cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var token = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            if (token.IsAuthentificated)
            {
                NavigationManager.NavigationManager.NavigateTo(RouteConst.Routes.Index);
            }
        }
    }
    public async Task OnSubmitLogin()
    {
        formLogin.Validate();
        if (!successValidationLoginForm)
            return;
        LoginError = false;
        var response = await AuthentificationService.Login(UserLoginDTO.Email,UserLoginDTO.Password,cancellationToken.Token);
        if(response)
        {
            StateHasChanged();
            NavigationManager.NavigationManager.NavigateTo(RouteConst.Routes.Index, true);
        }
        LoginError = !response;
        StateHasChanged();

    }
    public async Task OnSubmitRegister()
    {
        formLogin.Validate();
        if (!successValidationRegisterForm)
            return;
        RegisterErrors.Clear();
        RegisterUserDTO.DateOfBirth = RegisterDateTime;
        var response = await AuthentificationService.Register(RegisterUserDTO, cancellationToken.Token);
        if(response.IsSuccess)
        {
            NavigationManager.NavigationManager.NavigateTo(RouteConst.Routes.RegisterSuccess, true);//page welche info über erfolgreiche registrierung gibt und infos über das weitere vorgehen
        }
        else
        {
            if(response.HasErrors)
            {
                RegisterErrors = response.Errors;
            }
            else
            {
                RegisterErrors.Add(new ApiError { Title = "exception", Message="an unhandled error occured", Details="",Code=500 });
            }
        }
        StateHasChanged();
    }
}
@functions {


}
