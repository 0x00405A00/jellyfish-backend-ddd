
@inherits LayoutComponentBase
@inject IConfiguration Configuration
@inject DialogHandler DialogHandler
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ICustomAuthentificationStateProvider AuthentificationService
@inject ISessionStorage SessionStorage
@inject IJellyfishBackendApi WebApiClient
@inject LogoutBackgroundService LogoutBackgroundService
@inject JellyfishSignalRClient SignalRClient

<PageTitle>Jellyfish</PageTitle>

<div class="page">

    <MudThemeProvider Theme="@_currentTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider ></MudSnackbarProvider>
    <div class="sidebar">
        <div class="sidebar-header">

            <img class="jellyicon" src="static/media/jellyfish_image.svg" />
        </div>
        <NavMenu />
    </div>

    <main class="main">
        <div class="top-row px-4">
            @if (LogoutTimerVisible)
            {
                <MudButton Class="mr-2" Variant="Variant.Filled" DisableElevation="true" Color="MudBlazor.Color.Primary" OnClick="@ClickRefreshLogin">Refresh Login (@LogoutTimer.ToString(@"mm\:ss")m)</MudButton>
            }
            @if(IsLoggedIn) 
            {
                <MudMenu  AnchorOrigin="MudBlazor.Origin.BottomLeft">

                    <ActivatorContent>
                        <ProfileAvatar User="@CurrentUser" Loading="@Loading" HeightInPx="32" WidthInPx="32"></ProfileAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="@RouteConst.Routes.Profile">Profile</MudMenuItem>
                        <MudDivider></MudDivider>

                        @if (IsLoggedIn)
                        {
                            <MudMenuItem OnClick="@ClickLogout">Logout</MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem Href="@RouteConst.Routes.SignIn">Login</MudMenuItem>
                        }
                    </ChildContent>
                    
                </MudMenu>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<footer class="text-center text-white">
    <div class="container p-4">
        <!-- Section: Social media -->
        <section class="mb-4 border-0 bg-transparent">
            <!-- Facebook -->
            <a class="btn btn-floating m-1" href="#!" role="button">
                <img class="social-icon" src="static/media/facebook-svgrepo-com.svg" />
            </a>
            <!-- Twitter -->
            <a class="btn btn-floating m-1" href="#!" role="button">
                <img class="social-icon" src="static/media/twitter-svgrepo-com.svg" />
            </a>

            <!-- Instagram -->
            <a class="btn btn-floating m-1" href="#!" role="button">
                <img class="social-icon" src="static/media/instagram-167-svgrepo-com.svg" />
            </a>

            <!-- Linkedin -->
            <a class="btn btn-floating m-1" href="#!" role="button">
                <img class="social-icon" src="static/media/linkedin-logo-svgrepo-com.svg" />
            </a>

            <!-- Github -->
            <a class="btn btn-floating m-1" href="https://github.com/0x00405A00/jellyfish-backend-ddd" role="button">
                <img class="social-icon" src="static/media/github-142-svgrepo-com.svg" />
            </a>
        </section>
        <!-- Section: Social media -->
        <!-- Section: Links -->
        <section>
            <!--Grid row-->
            <div class="d-flex flex-row justify-content-center align-content-center">
                <!--Grid column-->
                <!--Grid column-->
                <div class="col-lg-3 col-md-6 mb-4 mb-md-0">
                    <h5 class="text-uppercase">Unsere Mission</h5>

                    <ul class="list-unstyled mb-0">
                        <li>
                            <a href="@RouteConst.Routes.Functions" class="text-white">Funktionen</a>
                        </li>
                        <li>
                            <a href="@RouteConst.Routes.Blog" class="text-white">Blog</a>
                        </li>
                        <li>
                            <a href="@RouteConst.Routes.Security" class="text-white">Sicherheit</a>
                        </li>
                    </ul>
                </div>
                <!--Grid column-->
                <!--Grid column-->
                <!--Grid column-->
                <div class="col-lg-3 col-md-6 mb-4 mb-md-0">
                    <h5 class="text-uppercase">Wer sind wir</h5>

                    <ul class="list-unstyled mb-0">
                        <li>
                            <a href="@RouteConst.Routes.AboutUs" class="text-white">About Us</a>
                        </li>
                        <li>
                            <a href="@RouteConst.Routes.Careere" class="text-white">Karriere</a>
                        </li>
                        <li>
                            <a href="@RouteConst.Routes.Privacy" class="text-white">Datenschutz</a>
                        </li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 mb-4 mb-md-0">
                    <h5 class="text-uppercase">Support</h5>

                    <ul class="list-unstyled mb-0">
                        <li>
                            <a href="@RouteConst.Routes.Contact" class="text-white">Kontakt</a>
                        </li>
                        <li>
                            <a href="@RouteConst.Routes.HelpArea" class="text-white">Hilfebereich</a>
                        </li>
                        <li>
                            <a href="#@RouteConst.Routes.SecurityNews" class="text-white">Sicherheitsmeldungen</a>
                        </li>
                    </ul>
                </div>
                <!--Grid column-->
            </div>
            <!--Grid row-->
        </section>
        <!-- Section: Links -->
    </div>
    <!-- Grid container -->
    <!-- Copyright -->
    <div class="text-center p-3">
        © 2023 Copyright:
        <a class="text-white" href="https://roos-it.net/">RoosIT.NET</a>
    </div>
    <!-- Copyright -->
</footer>
@code
{

    private readonly MudTheme _currentTheme = new()
        {
            Palette = new PaletteLight
            {
                Primary = "#0A7BCF",
                Secondary = "#800EEB",
                Info = "#64a7e2",
                Success = "#2ECC40",
                Warning = "#FFC107",
                Error = "#FF0000",
                AppbarBackground = "#212121",
                TextPrimary = "#000000",
                TextSecondary = "#000000",
                White = "#FFFFFF",

            },
        };
    private TimeSpan LogoutTimer = TimeSpan.MinValue;
    private bool LogoutTimerVisible => LogoutTimer != TimeSpan.MinValue;
    public bool Loading => CurrentUser is null;
    private AuthDTO _auth;
    public UserDTO CurrentUser;
    private bool ProfileButtonExpand = false;
    private bool IsLoggedIn => _auth!=null&& _auth.IsAuthentificated;
    private CancellationTokenSource cancellationToken = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _auth = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
            WebApiClient.SetSession(_auth);
            if (_auth.IsAuthentificated)
            {
                var authState = await AuthentificationService.GetAuthenticationStateAsync();
                CurrentUser = await WebApiClient.GetCurrentUser(authState, cancellationToken.Token);
                LogoutBackgroundService.OnRerenderRequested += RequestRerender;
            }
            StateHasChanged();
        }
    }

    public async Task ClickLogout()
    {
        await DialogHandler.ShowLogoutDialog(cancellationToken.Token);
    }

    public Task ProfileButtonClick()
    {
        ProfileButtonExpand = !ProfileButtonExpand;
        return Task.CompletedTask;
    }

    private async void ClickRefreshLogin()
    {
        var response = await AuthentificationService.RefreshLogin(_auth.Token,_auth.RefreshToken,cancellationToken.Token);
        if(response==null)
        {

            bool? result = await DialogService.ShowMessageBox(
                "Refreshlogin Error",
                "Session can´t extend, try again later!");
            return;
        }
        _auth = await AuthentificationService.GetCurrentAuthentification(cancellationToken.Token);
        LogoutTimer = TimeSpan.MinValue;
        StateHasChanged();
    }

    private void RequestRerender()
    {
        InvokeAsync(async() =>
        {
            if (_auth is not null)
            {
                if (_auth.TokenExpiresIn is not null)
                {
                    if (!_auth.IsTokenExpired)
                    {

                        var calcTime = _auth.TokenExpiresIn.Value.AddMinutes(-5);
                        if (DateTime.UtcNow >= calcTime)
                        {

                            LogoutTimer = _auth.TokenExpiresIn.Value - DateTime.UtcNow;
                            StateHasChanged(); // Dies löst einen Rerender der Komponente aus

                        }
                    }
                    else if (_auth.IsTokenExpired)
                    {
                        await AuthentificationService.Logout(cancellationToken.Token);
                        NavigationManager.NavigateTo(RouteConst.Routes.SignIn);
                    }
                }
            }
        });
    }
}