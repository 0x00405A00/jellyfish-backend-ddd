@inject IJSRuntime JS;

<MudAvatar @ref=Instance id="@ComponentId" Style="@Style" Class="@Class">
    @if(Loading)
    {
        <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="MudBlazor.Color.Secondary" Indeterminate="true" />
        </MudOverlay>
    }
    else
    {
        @if (User.HasImage)
        {
            <canvas id="@ImgElemId" height="@HeightInPx" width="@WidthInPx"></canvas>
        }
        else
        {
            @User.GetInitials() 
        }
    }
</MudAvatar>

@code {
    public MudAvatar Instance;
    public string ComponentId ;
    public string ImgElemId;

    [Parameter] public UserDTO User { get; set; } = new UserDTO();
    [Parameter] public int HeightInPx { get; set; } = 32;
    [Parameter] public int WidthInPx { get; set; } = 32;
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public string Class { get; set; } = string.Empty;

    private string Style => $"height: {HeightInPx}px; width: {WidthInPx}px;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        ComponentId = $"avatar-{Guid.NewGuid()}";
        if (User is not null && User.HasImage)
        {
            ImgElemId = $"avatar-img-{Guid.NewGuid()}";
            StateHasChanged();
            await JS.InvokeVoidAsync("setStyle", ImgElemId, Style);
            await JS.InvokeVoidAsync("renderImage", ImgElemId, User.PictureUrl ?? MimeExtension.GetImageAsMime(User.PictureBase64, User.PictureMimeType), HeightInPx, WidthInPx);
        }
        await JS.InvokeVoidAsync("setStyle", ComponentId, Style);
    }

}
